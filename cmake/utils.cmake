# Find subdirectories of BASEDIR_ABSPATH norecursively.
# BASEDIR_ABSPATH: /root/source/repos/run/replica/cpp-primer/chapter15
MACRO(GET_SUBDIR_LIST BASEDIR_ABSPATH SUBDIR_LIST)
  FILE(GLOB ENTRIES RELATIVE ${BASEDIR_ABSPATH} ${BASEDIR_ABSPATH}/*)
  SET(RESULT "")

  FOREACH(ENTRY ${ENTRIES})
    IF(IS_DIRECTORY ${BASEDIR_ABSPATH}/${ENTRY})
      LIST(APPEND RESULT ${ENTRY})

      # TODO, why can not using this?
      # LIST(APPEND SUBDIR_LIST ${ENTRY})
    ENDIF()
  ENDFOREACH()

  SET(${SUBDIR_LIST} ${RESULT})
ENDMACRO(GET_SUBDIR_LIST BASEDIR_ABSPATH SUBDIR_LIST)

# Find all subdirectories in BASEDIR_ABSPATH that contains include and src recursively.
# BASEDIR_ABSPATH: /root/source/repos/run/replica/cpp-primer
MACRO(GET_SUBDIR_ABSPATH_LIST_RECURSIVELY BASEDIR_ABSPATH SUBDIR_ABSPATH_LIST)
  # SUBDIR_RELPATH_LIST: chapter15; chapter16
  FILE(GLOB SUBDIR_RELPATH_LIST RELATIVE ${BASEDIR_ABSPATH} ${BASEDIR_ABSPATH}/*)

  SET(SUBDIR_ABSPATH_NEED_TO_CHECK_LIST "")

  # Combine BASEDIR_ABSPATH and SUBDIR_RELPATH into SUBDIR_ABSPATH.
  # ${SUBDIR_RELPATH}: chapter15
  FOREACH(SUBDIR_RELPATH ${SUBDIR_RELPATH_LIST})
    # SUBDIR_ABSPATH: /root/source/repos/run/replica/cpp-primer/chapter15;
    # /root/source/repos/run/replica/cpp-primer/chapter16
    SET(SUBDIR_ABSPATH ${BASEDIR_ABSPATH}/${SUBDIR_RELPATH})

    IF(IS_DIRECTORY ${SUBDIR_ABSPATH})
      LIST(APPEND SUBDIR_ABSPATH_NEED_TO_CHECK_LIST ${SUBDIR_ABSPATH})
    ENDIF()
  ENDFOREACH()

  # While check list is not empty.
  # SUBDIR_ABSPATH_NEED_TO_CHECK_LIST: /root/source/repos/run/replica/cpp-primer/chapter15;
  # /root/source/repos/run/replica/cpp-primer/chapter16
  WHILE(SUBDIR_ABSPATH_NEED_TO_CHECK_LIST)
    # Check every absolute subdir.
    FOREACH(SUBDIR_ABSPATH ${SUBDIR_ABSPATH_NEED_TO_CHECK_LIST})
      # SUBDIR_ABSPATH: /root/source/repos/run/replica/cpp-primer/chapter15
      # DIRNAME_IN_SUBDIR_ABSPATH: query; qoute
      # SUBDIR_ABSPATH: /root/source/repos/run/replica/cpp-primer/chapter16
      # DIRNAME_IN_SUBDIR_ABSPATH:
      GET_SUBDIR_LIST(${SUBDIR_ABSPATH} DIRNAME_IN_SUBDIR_ABSPATH)

      # If DIRNAME_IN_SUBDIR_ABSPATH is empty then find main.cpp in it or touch main.cpp.
      IF(NOT DIRNAME_IN_SUBDIR_ABSPATH)
        # TODO: Check main.cpp
        LIST(APPEND SUBDIR_ABSPATH_LIST ${SUBDIR_ABSPATH})

      # Else find subdir in the DIRNAME_IN_SUBDIR_ABSPATH and append them into check list.
      ELSE()
        # Join every subdir into check list.
        FOREACH(DIRNAME ${DIRNAME_IN_SUBDIR_ABSPATH})
          SET(DIR_PATH ${SUBDIR_ABSPATH}/${DIRNAME})

          # e.g. /root/source/repos/run/replica/cpp-primer/chapter15/query
          LIST(APPEND SUBDIR_ABSPATH_NEED_TO_CHECK_LIST ${DIR_PATH})
        ENDFOREACH()
      ENDIF()

      # Remove item we checked.
      LIST(REMOVE_ITEM SUBDIR_ABSPATH_NEED_TO_CHECK_LIST ${SUBDIR_ABSPATH})
    ENDFOREACH()
  ENDWHILE(SUBDIR_ABSPATH_NEED_TO_CHECK_LIST)
ENDMACRO()

MACRO(GENERATE_TARGET_NAME MODULE_CMAKE_LIST_DIR SUBDIR_ABSPATH_LIST TARGET_NAME_LIST)
  SET(RESULT "")

  # MODULE_CMAKE_LIST_DIR: /root/source/repos/run/replica/cpp-primer

  # TARGET_NAME_BASE: cpp-primer
  GET_FILENAME_COMPONENT(TARGET_NAME_BASE ${MODULE_CMAKE_LIST_DIR} NAME)

  # SUBDIR_ABSPATH
  # /root/source/repos/run/replica/cpp-primer/chapter15/quote
  # SUBDIR_ABSPATH - MODULE_CMAKE_LIST_DIR
  # chapter15/quote
  # Then transfer it into chapter15-quote
  # Final get TARGET_NAME_BASE-chapter15-quote = cpp-primer-chapter15-quote
  # This is the target name we want.
  FOREACH(SUBDIR_ABSPATH ${SUBDIR_ABSPATH_LIST})
    # DROP THE PART OF MODULE_CMAKE_LIST_DIR OF SUBDIR_ABSPATH
    STRING(REPLACE ${MODULE_CMAKE_LIST_DIR} "" SUB_DIR_NO_PREFIX ${SUBDIR_ABSPATH})

    SET(TARGET_NAME ${TARGET_NAME_BASE}${SUB_DIR_NO_PREFIX})

    # TARGET_NAME: cpp-primer-chapter15-quote
    STRING(REPLACE "/" "-" TARGET_NAME ${TARGET_NAME})

    LIST(APPEND TARGET_NAME_LIST ${TARGET_NAME})
  ENDFOREACH(SUBDIR_ABSPATH ${SUBDIR_ABSPATH_LIST})
ENDMACRO(GENERATE_TARGET_NAME MODULE_CMAKE_LIST_DIR SUBDIR_ABSPATH_LIST TARGET_NAME_LIST)

# MODULE_NAME: cpp-primer
# MODULE_CMAKE_LIST_DIR: /root/source/repos/run/replica/cpp-primer
MACRO(CONFIGURE_MODULE MODULE_NAME MODULE_CMAKE_LIST_DIR TARGET_LIST)
  MESSAGE(STATUS "Configuring ${MODULE_NAME}...")
  GET_SUBDIR_ABSPATH_LIST_RECURSIVELY(${MODULE_CMAKE_LIST_DIR} SUBDIR_ABSPATH_LIST)

  GENERATE_TARGET_NAME(${MODULE_CMAKE_LIST_DIR} "${SUBDIR_ABSPATH_LIST}" TARGET_NAME_LIST)

  LIST(LENGTH SUBDIR_ABSPATH_LIST LENGTH1)
  MATH(EXPR LENGTH2 "${LENGTH1} - 1")

  MESSAGE(STATUS "Target localtion:Target")

  FOREACH(VAL RANGE ${LENGTH2})
    LIST(GET SUBDIR_ABSPATH_LIST ${VAL} SUBDIR_ABSPATH)
    LIST(GET TARGET_NAME_LIST ${VAL} TARGET_NAME)
    MESSAGE(STATUS ${SUBDIR_ABSPATH}:${TARGET_NAME})

    SET(SOURCE_FILES "")
    AUX_SOURCE_DIRECTORY(${SUBDIR_ABSPATH} SOURCE_FILES)

    ADD_EXECUTABLE(${TARGET_NAME} ${SOURCE_FILES})

    IF(MSVC)
      # Warning level 4 and all warnings as errors.
      ADD_COMPILE_OPTIONS(/W4 /WX)
    ELSE()
      # Lots of warnings and all warnings as errors.
      ADD_COMPILE_OPTIONS(-Wall -Wextra -pedantic -Werror)
    ENDIF()

    TARGET_COMPILE_FEATURES(${TARGET_NAME} PRIVATE cxx_std_17)

    # SETTING INCLUDE DIRECTORY AND LINKING.
    TARGET_INCLUDE_DIRECTORIES(${TARGET_NAME} PUBLIC ${SUBDIR_ABSPATH}/include
      PUBLIC ${CMAKE_SOURCE_DIR}/utils)
    TARGET_LINK_LIBRARIES(${TARGET_NAME} PUBLIC run-utils)

    LIST(APPEND TARGET_LIST ${TARGET_NAME})
  ENDFOREACH(VAL RANGE ${LENGTH2})
ENDMACRO(CONFIGURE_MODULE MODULE_NAME MODULE_CMAKE_LIST_DIR TARGET_LIST)
